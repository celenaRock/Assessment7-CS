
 --In your notes document, take note of the timing result for the extraLargeArray results– comparing when the extraLargeArray is passed to doublerAppend and doublerInsert.--

    $ node runtime.js
     Results for the extraLargeArray
     insert 841.0357 ms
     append 4.3511 ms

 --Next, edit the code in runtime.js to obtain timing results for calling the two functions with all of the differently sized arrays– tinyArray, smallArray, mediumArray, largeArray, and extraLargeArray. Notate these in your document in some kind table table so that you can easily compare the different values for the timers in relation to the size of the array that was passed into each function.--


   Results for the tinyArray
     insert 34.3 μs
     append 88.6 μs

     Results for the smallArray
     insert 55 μs
     append 126.5 μs

     Results for the mediumArray    ---(here and on is the best way to determine large scale efficiency)---
     insert 164.3 μs
     append 179.6 μs
   
     Results for the largeArray
     insert 7.6335 ms
     append 470 μs

     Runtime name:|_Tiny_|_Small__|_Medium_|__Large__|XLarge
     ______insert:|34ns  |55 ns   |164.3 ns|7.6335 Ms|841.0357 Ms
     ______append:|88.6ns|126.5 ns|179.6 ns|470 ns   |4.3511 Ms

--Read over the results, and write a paragraph that explains the pattern you see. How does each function “scale”? Which of the two functions scales better? How can you tell?
For extra credit, do some review / research on why the slower function is so slow, and summarize the reasoning for this.--

Unshift()(here we call unshift "insert") is similar to push() (here we call push "append") method but the difference is unshift() adds the elements in the very beginning of array, shifting everybody over by 1, so while it seems efficient for a small scale like 10, imagine that happening 10,000 times. From what I understand, big O is determined by how many times something is iterated through, so it would be a linear O(n) complexity. Push() method adds at the end of the array, so it would be a constant O(n) complexity, so it's more efficient depending on the scale.

tldr; 
.push adds to the end of the array and rarely needs reallocate memory+copy over. (better for scale)
.unshift adds to the beginning and always needs to reallocate memory and copy data over through the array


